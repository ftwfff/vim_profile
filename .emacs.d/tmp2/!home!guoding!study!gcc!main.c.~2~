
#define _GNU_SOURCE
#include <stdio.h>
#if 0
#include <stdio.h>
#include <apue.h>
       int
       main(void)
       {
           char    *ptr;
           size_t      size;
           if (chdir("/usr/spool/uucppublic") < 0)
               err_sys("chdir failed");
           ptr = path_alloc(&size);    /* our own function */
           if (getcwd(ptr, size) == NULL)
               err_sys("getcwd failed");
           printf("cwd = %s\n", ptr);
exit(0); 
}
#endif
#include <stdio.h>
#include <linux/fs.h>
#include <fcntl.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <signal.h>
#include <termios.h>

extern int zwave_tty_create_dev(int i);

int main()
{
    zwave_tty_create_dev(4);
    char buffer[1000];
    fd_set rfds;
    int ret;
FILE *fd;
    struct termios cnf;
    struct timeval tv;
/*    fd = open("/dev/tty01", O_RDWR);*/
/*    signal(SIGINT, sig_handler);*/
/*    tcgetattr(fd,TSCANOW, &cnf);*/
/*    while(1){*/
/*        tv.tv_sec =5;*/
/*        tv.tv_sec =0;*/
/*        FD_ZERO(&rfds);*/
/*        FD_SET(0, &rfds);*/
/*        write(fd,"AT\r",3);*/
/*        ret = select(fd+1,&rfds,NULL,NULL,&tv);*/
/*        printf("ret=%d\n",ret);*/
/*        if(ret<0){*/
/*            perror("select()");*/
/*        }*/
/*        else{*/
/*            ret = read(fd, buffer, BSIZE-1);*/
/*            buffer[ret] = '\0';*/
/*            printk("read:\"%s\"\n", buffer);*/
/*        }*/
/*    }*/
    return 0;
}


#if 0
typedef  enum
_CCSP_SB_BLOCKEDSITE_BLOCKMETHOD
{
    CCSP_SB_BLOCKEDSITE_BLOCKMETHOD_URL    = 1,
    CCSP_SB_BLOCKEDSITE_BLOCKMETHOD_Keyword,
}
    CCSP_SB_BLOCKEDSITE_BLOCKMETHOD;
//file_read_test
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
int
input_timeout (int filedes, unsigned int seconds)
{
  fd_set set;
  struct timeval timeout;
  /* Initialize the file descriptor set. */
  FD_ZERO (&set);
  FD_SET (filedes, &set);

  /* Initialize the timeout data structure. */
  timeout.tv_sec = seconds;
  timeout.tv_usec = 0;

  /* select returns 0 if timeout, 1 if input available, -1 if error. */
  return TEMP_FAILURE_RETRY (select (FD_SETSIZE,
                                     &set, NULL, NULL,
                                     &timeout));
}
int
main (void)
{
  fprintf (stderr, "select returned %d.\n",
           input_timeout (STDIN_FILENO, 5));
  return 0;
}
int main(int argc, char *argv[])
{
    int var;
    printf("%d  %d\n", CCSP_SB_BLOCKEDSITE_BLOCKMETHOD_URL, CCSP_SB_BLOCKEDSITE_BLOCKMETHOD_Keyword);
/*    printf("%x\n",atoi(argv[1]));*/
    if(1)
    ;
    printf("aaa\n");
}

/*int main()*/
/*{*/
/*str*/
/*}*/

int main(void)
{
    int c;
    FILE *fd = fopen("/workspace/guoding/nas/5k6k/EDA/src/application/generic/main.c", "r");
    fseek(fd, 0, SEEK_END);
    long int ret = ftell(fd);
    printf("size = %d\n", ret);
    fseek(fd, 0, SEEK_SET);
    while((c=fgetc(fd))!=EOF)
    {
        printf("%c", c);
    }
    fclose(fd);
}
#endif

#if 0
int main(void)
{
int  i;

//ÕâÊÇ×Ö·ûÊý×é¸³³õÖµµÄ·½·¨£¬Î¬Êý£º4£Ø2
/*int *abc;*/
/**abc = 100;*/
char cArr[][2] = {{'Q','U'},
                 {'A','N'},
                 {'X','U'},
                 {'E','\0'}};
//ÕâÊÇ×Ö·û´®Êý×é¸³³õÖµµÄ·½·¨£¬Î¬Êý£º4£Ø3
char sArr[][3] = {"qu","an","xu","e"};

//ÓÃsizeof()Çó³¤¶È
for (i=0; i<4; i++) {
    printf("%d: %d  %d\n", i, sizeof(cArr[i]), sizeof(sArr[i]));
    printf("[%s] [%s]\n", cArr[i], sArr[i]);
}

return 0;
}
#endif
