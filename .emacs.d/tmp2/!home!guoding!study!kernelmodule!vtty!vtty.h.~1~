#ifndef SCTPA_ZWAVE_VTTY_HEADER
#define SCTPA_ZWAVE_VTTY_HEADER

#ifndef SCTPA_CMD_HASH_TABLE_SIZE
#define SCTPA_CMD_HASH_TABLE_SIZE 16
#endif

#ifndef SCTPA_CMD_FLUSH_INTERVAL
#define SCTPA_CMD_FLUSH_INTERVAL (5 * HZ)
#endif

typedef struct{
	struct tty_struct *tty;
	pid_t pid;
}vttyDevId_t;

typedef struct{
	vttyDevId_t ttyId;
	long openTick;
	int freeRoom;
	unsigned int numWriteRcved; /*from user application*/
	unsigned int numMsgRcved; /*from remote sensors or controller*/
}vttyDevElement_t;

typedef struct{
	int number;
	vttyDevElement_t *vttyTable;
}vttyDevInfo_t;

typedef struct{
	struct task_struct *rcvThread;
	unsigned int cmdSent;
	unsigned int msgRcved;
	unsigned int msgFlooded;
}agentInfo_t;

extern int 	init_zwave_agent(char *);
extern void 	clean_zwave_agent(void);
extern int 	init_vtty_device(int);
extern void 	clean_vtty_device(void);
extern int 	my_tty_send_data(const char *, int, vttyDevId_t);
extern void 	my_tty_rcv_data(char *, int, vttyDevId_t);
extern void 	my_tty_set_termios(struct tty_struct * tty, struct ktermios * old);
extern int 	my_tty_ioctl(struct tty_struct * tty, unsigned int cmd, unsigned long arg);
extern void 	vtty_closed(struct tty_struct * tty);

extern int debug;

#define VTTY_LOG(level, fmt,  args...) \
	do{ \
		if(debug==1){ \
			printk(level "vtty: " fmt, ## args); \
		} \
	}while(0)

#endif

