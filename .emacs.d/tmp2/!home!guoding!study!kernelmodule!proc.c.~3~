#include <linux/module.h>
#include <linux/proc_fs.h>
#include <linux/seq_file.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/proc_fs.h>
#include <linux/sched.h>
#include <asm/uaccess.h>


#define STRINGLEN 1024

char global_buffer[STRINGLEN]; 

static int proc_write_hello(struct file *file, const char *buffer,unsigned long count,void *data) {
    int len;
    if (count = STRINGLEN)
        len = STRINGLEN - 1;
    else
        len = count;
    if(count >= STRINGLEN)
    {
        len = STRINGLEN - 1;
    }
    else
        len = count;
    copy_from_user(global_buffer, buffer, len);
    global_buffer[len] = '\0';
    printk("written: %s", global_buffer);
    return len;
}


static int proc_read_hello(char *page, char **start, off_t off, int count, int *eof,
                void *data) {
        int len;
        copy_to_user(page, global_buffer, count);
        /* len = sprintf(page, global_buffer); //把global_buffer的内容显示给访问者 */
        return count;//dgl_temp ?
}


static int hello_proc_show(struct seq_file *m, void *v) {
  seq_printf(m, "Hello proc!\n");
  return 0;
}

static int hello_proc_open(struct inode *inode, struct  file *file) {
  return single_open(file, hello_proc_show, NULL);
}

static const struct file_operations hello_proc_fops = {
  .owner = THIS_MODULE,
  .open = hello_proc_open,
  .read = proc_read_hello, //seq_read,
  .write = proc_write_hello,//seq_write,
  .llseek = seq_lseek,
  .release = single_release,
};


static int __init hello_proc_init(void) {
  proc_create("hello_proc", 0x777, NULL, &hello_proc_fops);
  return 0;
}

static void __exit hello_proc_exit(void) {
  remove_proc_entry("hello_proc", NULL);
}

MODULE_LICENSE("GPL");
module_init(hello_proc_init);
module_exit(hello_proc_exit);




/* #include <linux/init.h> */
/* #include <linux/module.h> */

/* static int proc_init(void) */
/* { */
/*     printk("hello proc"); */
/* } */

/* static int proc_exit(void) */
/* { */
/*     printk("goodbye proc"); */
/* } */


/* module_init(proc_init); */
/* module_exit(proc_exit); */

/* MODULE_LICENSE("GPL"); */
/* MODULE_AUTHOR("Guo liang"); */
/* MODULE_DESCRIPTION("Hello world Kenel module"); */

/* #include <linux/module.h> */
/* #include <linux/kernel.h> */
/* #include <linux/proc_fs.h> */
/* #include <linux/sched.h> */
/* #include <asm/uaccess.h> */

/* #define STRINGLEN 1024 */

/* char global_buffer[STRINGLEN]; */

/* struct proc_dir_entry *example_dir, *hello_file; */

/* int proc_read_hello(char *page, char **start, off_t off, int count, int *eof, */
/*                 void *data) { */
/*         int len; */
/*         len = sprintf(page, global_buffer); //把global_buffer的内容显示给访问者 */
/*         return len; */
/* } */

/* int proc_write_hello(struct file *file, const char *buffer,unsigned long count,void *data) { */
/*     int len; */
/*     if (count = STRINGLEN) */
/*         len = STRINGLEN - 1; */
/*     else */
/*         len = count;copy_from_user(global_buffer, buffer, len); */
/*     global_buffer[len] = '\0'; */
/*     return len; */
/* } */

/* static const struct file_operations proc_file_fops = { */
/*     .owner = THIS_MODULE; */
/*     .read = proc_read_hello; */
/*     .write = proc_write_hello; */
/* } */
/* static int __init proc_test_init(void) { */
/*         example_dir = proc_mkdir("proc_test", NULL); */
/*         /\* hello_file = create_proc_entry("hello", S_IRUGO, example_dir); *\/ */
/*         /\* proc_file_entry = proc_create("proc_file_name", 0, NULL, &proc_file_fops); *\/ */
/*         hello_file = proc_create("hello", 0, NULL, S_IRUGO, example_dir); */
/*         strcpy(global_buffer, "hello"); */
/*         hello_file->read_proc = proc_read_hello; */
/*         hello_file->write_proc = proc_write_hello; */
/*         return 0; */
/* } */

/* static void __exit proc_test_exit(void) { */
/*         remove_proc_entry("hello", example_dir); */
/*         remove_proc_entry(“proc_test”, NULL); */
/* } */
/* module_init(proc_test_init); */
/* module_exit(proc_test_exit); */
