#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/inotify.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define MYPORT 6666    // the port users will be connecting to

#define BACKLOG 5     // how many pending connections queue will hold

#define BUF_SIZE 256
#define CMD_SIZE 512

#define EVENT_SIZE  ( sizeof (struct inotify_event) )
#define BUF_LEN     ( 1024 * ( EVENT_SIZE + 16 ) )

int fd_A[BACKLOG];    // accepted connection fd
int fd_B[BACKLOG];    // notify proc file fd
int conn_amount;    // current connection amount

int startmonitorfile(char *file_pwd, int* fd, int* wd)
{
    int fd_t, wd_t;

    printf("start monitor file\n");
 
    fd_t = inotify_init();
    if (fd < 0) {
         perror("inotify_init");
         return -1;
    }

    wd_t = inotify_add_watch(fd_t, file_pwd, IN_MODIFY | IN_CREATE | IN_DELETE);

    *fd = fd_t;
    *wd = wd_t;

    return 0;
}

void readprocfile(char * file, char * buf)
{
    int fd = open(file,0);
    read(fd,buf,1024);
    
    printf("read api: [%s]\n",buf);

    return;
}

void closemonitorfile(int fd, int wd)
{
    (void)inotify_rm_watch(fd, wd);
    (void)close(fd);
    
    return;
}

void showclient()
{
    int i;
    printf("client amount: %d\n", conn_amount);
    for (i = 0; i < BACKLOG; i++) {
        printf("[%d]:(sock_fd: %d,proc_fd: %d) \n ", i, fd_A[i],fd_B[i]);
    }
    printf("\n\n");
}

int main(void)
{
    int sock_fd, new_fd;  // listen on sock_fd, new connection on new_fd
    int monitor_fd, monitor_wd[BACKLOG];  //inotify proc file, only support monitor_wd[0]
    struct sockaddr_in server_addr;    // server address information
    struct sockaddr_in client_addr; // connector's address information
    socklen_t sin_size;
    int yes = 1;
    char buf[BUF_SIZE];
    char buf_proc[1024];
    char name[128];
    char cmd_buf[CMD_SIZE];
    int ret;
    int i;

    if ((sock_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(1);
    }

    if (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1) {
        perror("setsockopt");
        exit(1);
    }

    server_addr.sin_family = AF_INET;         // host byte order
    server_addr.sin_port = htons(MYPORT);     // short, network byte order
    server_addr.sin_addr.s_addr = INADDR_ANY; // automatically fill with my IP
    memset(server_addr.sin_zero, '\0', sizeof(server_addr.sin_zero));

    if (bind(sock_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        exit(1);
    }

    if (listen(sock_fd, BACKLOG) == -1) {
        perror("listen");
        printf("\n====\n");
    }

    printf("listen port %d\n", MYPORT);

    fd_set fdsr;
    int maxsock;
    struct timeval tv;

    conn_amount = 0;
    sin_size = sizeof(client_addr);
    maxsock = sock_fd;

    while (1) {
        // initialize file descriptor set
        FD_ZERO(&fdsr);
        FD_SET(sock_fd, &fdsr);

        // timeout setting
        tv.tv_sec = 30;
        tv.tv_usec = 0;

        // add active connection and notify proc file fd set
        for (i = 0; i < BACKLOG; i++) {
            if (fd_A[i] != 0) {
                FD_SET(fd_A[i], &fdsr);
                printf("add fd_A[%d]\n",i);
            }
            if (fd_B[i] != 0) {
                FD_SET(fd_B[i], &fdsr);
                printf("add fd_B[%d]\n",i);
            }
        }

        ret = select(maxsock + 1, &fdsr, NULL, NULL, &tv);
        if (ret < 0) {
            perror("select");
            break;
        } else if (ret == 0) {
            printf("timeout\n");
            continue;
        }

        // check every fd in the set
        for (i = 0; i < conn_amount; i++) {
            if (FD_ISSET(fd_A[i], &fdsr)) {
                //receive msg from client
                ret = recv(fd_A[i], buf, sizeof(buf), 0);
                if (ret <= 0) {
                    // client close
                    printf("client[%d] close\n", i);
                    close(fd_A[i]);
                    FD_CLR(fd_A[i], &fdsr);
                    fd_A[i] = 0;
                } else {
                    // receive data from client and write the data to proc file
                    if (ret < BUF_SIZE)
                        memset(&buf[ret], '\0', 1);
                    printf("client[%d] send:%s\n", i, buf);
                    sprintf(cmd_buf,"echo \"%s\" > /proc/zwave/ttty0_up",buf);
                    printf("%s\n",cmd_buf);
                    system(cmd_buf);
                    //send msg to client when received data
                    //send(fd_A[i],"received",9,0);
                }
            }
            if (FD_ISSET(fd_B[i],&fdsr)) {
                //proc file modified
                int length, j = 0;
                char buffer[BUF_LEN];
                length = read(fd_B[i], buffer, BUF_LEN);
                if (length < 0) 
                    perror("read");

                while (j < length) {
                    struct inotify_event *event = ( struct inotify_event * ) &buffer[i];
                    if (event->len) {
                        if (event->mask & IN_MODIFY ) {
                            if ( event->mask & IN_ISDIR ) 
                                printf("The directory %s was modified.\n",event->name);
                            else {
                                printf("The file %s was modified.\n",event->name);
                                sprintf(name, "/proc/zwave/%s",event->name);
                                memset(buf_proc, '\0', 1024);
                                readprocfile(name,buf_proc);
                                printf("read proc file content: [%s]\n",buf_proc);
                                if (strcmp(buf_proc, "") ==0 || strcmp(buf_proc, "\n") == 0||strcmp(buf_proc, "\0") == 0)
                                    printf("read useless info!\n");
                                else
                                    send(fd_A[i],buf_proc,1024,0);
                            }
                        }
                    }
                    j += EVENT_SIZE + event->len;
                }
            }
        }

        // check whether a new connection comes, if yes, insert pseudo driver module
        if (FD_ISSET(sock_fd, &fdsr)) {
            new_fd = accept(sock_fd, (struct sockaddr *)&client_addr, &sin_size);
            if (new_fd <= 0) {
                perror("accept");
                continue;
            }

            // add to fd queue
            if (conn_amount < BACKLOG) {
                fd_A[conn_amount] = new_fd;
                //insert module, might need change if more client has been supported
                system("sudo insmod ./pseudo_driver.ko");

                //monitor proc file
                if(startmonitorfile("/var/tmp/vtty",&monitor_fd,&monitor_wd[0]) == -1) {
                    perror("startmonitorfile");
                    exit(1);
                }
                fd_B[conn_amount] = monitor_fd;
                printf("====fb_B[%d] = %d\n",conn_amount, fd_B[conn_amount]);
                conn_amount++;
 
                printf("new connection client[%d] %s:%d\n", conn_amount,
                        inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
                if (new_fd > maxsock)
                    maxsock = new_fd;
                if (monitor_fd > maxsock)
                    maxsock = monitor_fd;
            }
            else {
                printf("max connections arrive, exit\n");
                send(new_fd, "Rejected", 4, 0);
                close(new_fd);
                break;
            }
        }
        showclient();
    }

    // close other connections
    for (i = 0; i < BACKLOG; i++) {
        if (fd_A[i] != 0) {
            close(fd_A[i]);
        }
        if (fd_B[i != 0]) {
            closemonitorfile(fd_B[i],monitor_wd[0]);
        }
    }

    exit(0);
}

